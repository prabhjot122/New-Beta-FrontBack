version: '3.8'

# =============================================================================
# LawVriksh Production Docker Compose - Optimized for 8GB RAM VPS
# Domain: https://lawvriksh.com (Frontend) + https://lawvriksh.com/api/ (Backend)
# MySQL Port: 3307 (Custom)
# =============================================================================

services:
  # MySQL Database (2GB RAM, Port 3307)
  mysql:
    image: mysql:8.0
    container_name: lawvriksh_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "127.0.0.1:3307:3306"  # Custom port 3307
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ./lawdata.sql:/docker-entrypoint-initdb.d/lawdata.sql
      - ./mysql-config:/etc/mysql/conf.d
      - ./logs/mysql:/var/log/mysql
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --innodb-buffer-pool-size=1G
      --max-connections=100
      --slow-query-log=1
      --slow-query-log-file=/var/log/mysql/slow.log
      --long-query-time=2
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}"]
      timeout: 20s
      retries: 10
      interval: 30s
    networks:
      - lawvriksh_network

  # Redis Cache (256MB RAM)
  redis:
    image: redis:7-alpine
    container_name: lawvriksh_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - ./redis-data:/data
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lawvriksh_network

  # Backend FastAPI (2GB RAM)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: lawvriksh_backend
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+pymysql://${DB_USER}:${DB_PASSWORD}@mysql:3306/${DB_NAME}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - EMAIL_FROM=${EMAIL_FROM}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - ENVIRONMENT=production
      - CACHE_DIR=/app/cache
      - FRONTEND_URL=https://lawvriksh.com
      - REDIS_URL=redis://redis:6379
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - ./cache:/app/cache
      - ./logs/backend:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - lawvriksh_network

  # Frontend React (1GB RAM)
  frontend:
    build:
      context: ./Frontend
      dockerfile: ../Dockerfile.frontend
    container_name: lawvriksh_frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=https://lawvriksh.com/api
      - NODE_ENV=production
    ports:
      - "127.0.0.1:3000:80"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - lawvriksh_network

  # Prometheus Monitoring (512MB RAM)
  prometheus:
    image: prom/prometheus:latest
    container_name: lawvriksh_prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./prometheus-config:/etc/prometheus
      - ./prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - lawvriksh_network

  # Grafana Dashboard (512MB RAM)
  grafana:
    image: grafana/grafana:latest
    container_name: lawvriksh_grafana
    restart: unless-stopped
    ports:
      - "127.0.0.1:3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./grafana-data:/var/lib/grafana
      - ./grafana-config:/etc/grafana/provisioning
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    networks:
      - lawvriksh_network

  # Backup Service
  backup:
    image: alpine:latest
    container_name: lawvriksh_backup
    restart: unless-stopped
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - BACKUP_EMAIL=sahilsaurav2507@gmail.com
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./backup-scripts:/scripts
    command: /scripts/backup-cron.sh
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - lawvriksh_network

networks:
  lawvriksh_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql-data:
  redis-data:
  prometheus-data:
  grafana-data:

# =============================================================================
# Resource Allocation Summary (8GB RAM VPS):
# - MySQL: 2GB RAM, 1 CPU
# - Backend: 2GB RAM, 2 CPU  
# - Frontend: 1GB RAM, 1 CPU
# - Prometheus: 512MB RAM, 0.5 CPU
# - Grafana: 512MB RAM, 0.5 CPU
# - Redis: 256MB RAM, 0.2 CPU
# - System Reserved: 1.5GB RAM
# Total: ~6.5GB RAM allocated, 1.5GB reserved for system
# =============================================================================
